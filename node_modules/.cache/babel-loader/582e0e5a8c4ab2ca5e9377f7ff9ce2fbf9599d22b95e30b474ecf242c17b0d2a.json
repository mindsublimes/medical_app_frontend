{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { fetchOpportunities } from '../services/api';\n// Define the initial state with additional states\nconst initialState = {\n  opportunities: [],\n  leads: [],\n  qualified: [],\n  booked: [],\n  treated: []\n  // ... other states\n};\nexport const DataContext = /*#__PURE__*/createContext();\n\n// Update the reducer to handle new actions\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_OPPORTUNITIES':\n      return {\n        ...state,\n        opportunities: action.payload\n      };\n    case 'SET_LEADS':\n      return {\n        ...state,\n        leads: action.payload\n      };\n    case 'SET_QUALIFIED':\n      return {\n        ...state,\n        qualified: action.payload\n      };\n    case 'SET_BOOKED':\n      return {\n        ...state,\n        booked: action.payload\n      };\n    case 'SET_TREATED':\n      return {\n        ...state,\n        treated: action.payload\n      };\n    // ... other cases\n    default:\n      return state;\n  }\n};\n\n// DataProvider component\n// export const DataProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(dataReducer, initialState);\n\n//   useEffect(() => {\n//     // Fetch opportunities\n//     fetchOpportunities()\n//       .then(response => response.json())\n//       .then(data => {\n//         dispatch({ type: 'SET_OPPORTUNITIES', payload: data });\n\n//         // Filter opportunities based on the latest stage in their stage_history\n//         const leads = data.filter(opportunity =>\n//           opportunity.stage_history[opportunity.stage_history.length - 1].stage_name === 'Lead'\n//         );\n//         const qualified = data.filter(opportunity =>\n//           opportunity.stage_history[opportunity.stage_history.length - 1].stage_name === 'Qualified'\n//         );\n//         const booked = data.filter(opportunity =>\n//           opportunity.stage_history[opportunity.stage_history.length - 1].stage_name === 'Booked'\n//         );\n//         const treated = data.filter(opportunity =>\n//           opportunity.stage_history[opportunity.stage_history.length - 1].stage_name === 'Treated'\n//         );\n\n//         dispatch({ type: 'SET_LEADS', payload: leads });\n//         dispatch({ type: 'SET_QUALIFIED', payload: qualified });\n//         dispatch({ type: 'SET_BOOKED', payload: booked });\n//         dispatch({ type: 'SET_TREATED', payload: treated });\n//       })\n//       .catch(error => console.error('Error fetching opportunities:', error));\n//   }, []);\n\n//   return (\n//     <DataContext.Provider value={{ state, dispatch }}>\n//       {children}\n//     </DataContext.Provider>\n//   );\n// };\n\n// Export custom hooks for state and dispatch\nexport const useDataState = () => {\n  _s();\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useDataState must be used within a DataProvider');\n  }\n  return context.state;\n};\n\n// Custom hook to access the dispatch function\n_s(useDataState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useDataDispatch = () => {\n  _s2();\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useDataDispatch must be used within a DataProvider');\n  }\n  return context.dispatch;\n};\n_s2(useDataDispatch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","fetchOpportunities","initialState","opportunities","leads","qualified","booked","treated","DataContext","dataReducer","state","action","type","payload","useDataState","_s","context","Error","useDataDispatch","_s2","dispatch"],"sources":["/home/dev-cache/medical-app-frontend/src/contexts/OpportunityContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { fetchOpportunities } from '../services/api';\n// Define the initial state with additional states\nconst initialState = {\n  opportunities: [],\n  leads: [],\n  qualified: [],\n  booked: [],\n  treated: [],\n  // ... other states\n};\n\nexport const DataContext = createContext();\n\n// Update the reducer to handle new actions\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_OPPORTUNITIES':\n      return { ...state, opportunities: action.payload };\n    case 'SET_LEADS':\n      return { ...state, leads: action.payload };\n    case 'SET_QUALIFIED':\n      return { ...state, qualified: action.payload };\n    case 'SET_BOOKED':\n      return { ...state, booked: action.payload };\n    case 'SET_TREATED':\n      return { ...state, treated: action.payload };\n    // ... other cases\n    default:\n      return state;\n  }\n};\n\n// DataProvider component\n// export const DataProvider = ({ children }) => {\n//   const [state, dispatch] = useReducer(dataReducer, initialState);\n\n//   useEffect(() => {\n//     // Fetch opportunities\n//     fetchOpportunities()\n//       .then(response => response.json())\n//       .then(data => {\n//         dispatch({ type: 'SET_OPPORTUNITIES', payload: data });\n  \n//         // Filter opportunities based on the latest stage in their stage_history\n//         const leads = data.filter(opportunity =>\n//           opportunity.stage_history[opportunity.stage_history.length - 1].stage_name === 'Lead'\n//         );\n//         const qualified = data.filter(opportunity =>\n//           opportunity.stage_history[opportunity.stage_history.length - 1].stage_name === 'Qualified'\n//         );\n//         const booked = data.filter(opportunity =>\n//           opportunity.stage_history[opportunity.stage_history.length - 1].stage_name === 'Booked'\n//         );\n//         const treated = data.filter(opportunity =>\n//           opportunity.stage_history[opportunity.stage_history.length - 1].stage_name === 'Treated'\n//         );\n  \n//         dispatch({ type: 'SET_LEADS', payload: leads });\n//         dispatch({ type: 'SET_QUALIFIED', payload: qualified });\n//         dispatch({ type: 'SET_BOOKED', payload: booked });\n//         dispatch({ type: 'SET_TREATED', payload: treated });\n//       })\n//       .catch(error => console.error('Error fetching opportunities:', error));\n//   }, []);\n\n//   return (\n//     <DataContext.Provider value={{ state, dispatch }}>\n//       {children}\n//     </DataContext.Provider>\n//   );\n// };\n\n// Export custom hooks for state and dispatch\nexport const useDataState = () => {\n    const context = useContext(DataContext);\n    if (!context) {\n      throw new Error('useDataState must be used within a DataProvider');\n    }\n    return context.state;\n  };\n  \n  // Custom hook to access the dispatch function\n  export const useDataDispatch = () => {\n    const context = useContext(DataContext);\n    if (!context) {\n      throw new Error('useDataDispatch must be used within a DataProvider');\n    }\n    return context.dispatch;\n  };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD;AACA,MAAMC,YAAY,GAAG;EACnBC,aAAa,EAAE,EAAE;EACjBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,EAAE;EACVC,OAAO,EAAE;EACT;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,gBAAGX,aAAa,CAAC,CAAC;;AAE1C;AACA,MAAMY,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGF,KAAK;QAAEP,aAAa,EAAEQ,MAAM,CAACE;MAAQ,CAAC;IACpD,KAAK,WAAW;MACd,OAAO;QAAE,GAAGH,KAAK;QAAEN,KAAK,EAAEO,MAAM,CAACE;MAAQ,CAAC;IAC5C,KAAK,eAAe;MAClB,OAAO;QAAE,GAAGH,KAAK;QAAEL,SAAS,EAAEM,MAAM,CAACE;MAAQ,CAAC;IAChD,KAAK,YAAY;MACf,OAAO;QAAE,GAAGH,KAAK;QAAEJ,MAAM,EAAEK,MAAM,CAACE;MAAQ,CAAC;IAC7C,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGH,KAAK;QAAEH,OAAO,EAAEI,MAAM,CAACE;MAAQ,CAAC;IAC9C;IACA;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMI,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,OAAO,GAAGlB,UAAU,CAACU,WAAW,CAAC;EACvC,IAAI,CAACQ,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;EACpE;EACA,OAAOD,OAAO,CAACN,KAAK;AACtB,CAAC;;AAED;AAAAK,EAAA,CARWD,YAAY;AASvB,OAAO,MAAMI,eAAe,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnC,MAAMH,OAAO,GAAGlB,UAAU,CAACU,WAAW,CAAC;EACvC,IAAI,CAACQ,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO,CAACI,QAAQ;AACzB,CAAC;AAACD,GAAA,CANWD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}