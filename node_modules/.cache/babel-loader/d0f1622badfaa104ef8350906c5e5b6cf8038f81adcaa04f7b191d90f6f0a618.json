{"ast":null,"code":"var _jsxFileName = \"/home/dev-cache/medical-app-frontend/src/contexts/DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\n\n// Define the initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  opportunities: [] // Initialize with an empty array for opportunities\n};\n\n// Create a context for the state\nexport const DataContext = /*#__PURE__*/createContext();\n\n// Create a context for the dispatch function\nexport const DataDispatchContext = /*#__PURE__*/createContext();\n\n// Define the reducer function to update the state\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_OPPORTUNITIES':\n      return {\n        ...state,\n        opportunities: action.payload\n      };\n    // Add other cases as needed for different actions\n    default:\n      return state;\n  }\n};\n\n// Create a DataProvider component to wrap your app with\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(dataReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(DataDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to access the state\n_s(DataProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = DataProvider;\nexport const useDataState = () => {\n  _s2();\n  return useContext(DataContext);\n};\n\n// Custom hook to access the dispatch function\n_s2(useDataState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const useDataDispatch = () => {\n  _s3();\n  return useContext(DataDispatchContext);\n};\n_s3(useDataDispatch, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","initialState","opportunities","DataContext","DataDispatchContext","dataReducer","state","action","type","payload","DataProvider","children","_s","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDataState","_s2","useDataDispatch","_s3","$RefreshReg$"],"sources":["/home/dev-cache/medical-app-frontend/src/contexts/DataContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\n\n// Define the initial state\nconst initialState = {\n  opportunities: [], // Initialize with an empty array for opportunities\n};\n\n// Create a context for the state\nexport const DataContext = createContext();\n\n// Create a context for the dispatch function\nexport const DataDispatchContext = createContext();\n\n// Define the reducer function to update the state\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_OPPORTUNITIES':\n      return { ...state, opportunities: action.payload };\n    // Add other cases as needed for different actions\n    default:\n      return state;\n  }\n};\n\n// Create a DataProvider component to wrap your app with\nexport const DataProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(dataReducer, initialState);\n\n  return (\n    <DataContext.Provider value={state}>\n      <DataDispatchContext.Provider value={dispatch}>\n        {children}\n      </DataDispatchContext.Provider>\n    </DataContext.Provider>\n  );\n};\n\n// Custom hook to access the state\nexport const useDataState = () => {\n  return useContext(DataContext);\n};\n\n// Custom hook to access the dispatch function\nexport const useDataDispatch = () => {\n  return useContext(DataDispatchContext);\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,QAAQ,OAAO;;AAEpE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,aAAa,EAAE,EAAE,CAAE;AACrB,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMQ,mBAAmB,gBAAGR,aAAa,CAAC,CAAC;;AAElD;AACA,MAAMS,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,sBAAsB;MACzB,OAAO;QAAE,GAAGF,KAAK;QAAEJ,aAAa,EAAEK,MAAM,CAACE;MAAQ,CAAC;IACpD;IACA;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGf,UAAU,CAACO,WAAW,EAAEJ,YAAY,CAAC;EAE/D,oBACED,OAAA,CAACG,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAET,KAAM;IAAAK,QAAA,eACjCX,OAAA,CAACI,mBAAmB,CAACU,QAAQ;MAACC,KAAK,EAAEF,QAAS;MAAAF,QAAA,EAC3CA;IAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACmB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAE3B,CAAC;;AAED;AAAAP,EAAA,CAZaF,YAAY;AAAAU,EAAA,GAAZV,YAAY;AAazB,OAAO,MAAMW,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChC,OAAOzB,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;;AAED;AAAAmB,GAAA,CAJaD,YAAY;AAKzB,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnC,OAAO3B,UAAU,CAACO,mBAAmB,CAAC;AACxC,CAAC;AAACoB,GAAA,CAFWD,eAAe;AAAA,IAAAH,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}