{"ast":null,"code":"var _jsxFileName = \"/home/dev-cache/medical-app-frontend/src/contexts/OpportunityContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Define the initial state with additional states\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  opportunities: [],\n  leads: [],\n  qualified: [],\n  booked: [],\n  treated: []\n  // ... other states\n};\nexport const DataContext = /*#__PURE__*/createContext();\n\n// Update the reducer to handle new actions\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_OPPORTUNITIES':\n      return {\n        ...state,\n        opportunities: action.payload\n      };\n    case 'SET_LEADS':\n      return {\n        ...state,\n        leads: action.payload\n      };\n    case 'SET_QUALIFIED':\n      return {\n        ...state,\n        qualified: action.payload\n      };\n    case 'SET_BOOKED':\n      return {\n        ...state,\n        booked: action.payload\n      };\n    case 'SET_TREATED':\n      return {\n        ...state,\n        treated: action.payload\n      };\n    // ... other cases\n    default:\n      return state;\n  }\n};\n\n// DataProvider component\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(dataReducer, initialState);\n  useEffect(() => {\n    // Replace 'fetchOpportunities' with the actual API call function\n    fetchOpportunities().then(response => response.json()).then(data => {\n      dispatch({\n        type: 'SET_OPPORTUNITIES',\n        payload: data\n      });\n      dispatch({\n        type: 'SET_LEADS',\n        payload: data.filter(opportunity => opportunity.stage === 'Lead')\n      });\n      dispatch({\n        type: 'SET_QUALIFIED',\n        payload: data.filter(opportunity => opportunity.stage === 'Qualified')\n      });\n      dispatch({\n        type: 'SET_BOOKED',\n        payload: data.filter(opportunity => opportunity.stage === 'Booked')\n      });\n      dispatch({\n        type: 'SET_TREATED',\n        payload: data.filter(opportunity => opportunity.stage === 'Treated')\n      });\n    }).catch(error => console.error('Error fetching opportunities:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n// Export custom hooks for state and dispatch\n_s(DataProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = DataProvider;\nexport const useDataState = () => {\n  _s2();\n  return useContext(DataContext).state;\n};\n_s2(useDataState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const useDataDispatch = () => {\n  _s3();\n  return useContext(DataContext).dispatch;\n};\n_s3(useDataDispatch, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","opportunities","leads","qualified","booked","treated","DataContext","dataReducer","state","action","type","payload","DataProvider","children","_s","dispatch","fetchOpportunities","then","response","json","data","filter","opportunity","stage","catch","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDataState","_s2","useDataDispatch","_s3","$RefreshReg$"],"sources":["/home/dev-cache/medical-app-frontend/src/contexts/OpportunityContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Define the initial state with additional states\nconst initialState = {\n  opportunities: [],\n  leads: [],\n  qualified: [],\n  booked: [],\n  treated: [],\n  // ... other states\n};\n\nexport const DataContext = createContext();\n\n// Update the reducer to handle new actions\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_OPPORTUNITIES':\n      return { ...state, opportunities: action.payload };\n    case 'SET_LEADS':\n      return { ...state, leads: action.payload };\n    case 'SET_QUALIFIED':\n      return { ...state, qualified: action.payload };\n    case 'SET_BOOKED':\n      return { ...state, booked: action.payload };\n    case 'SET_TREATED':\n      return { ...state, treated: action.payload };\n    // ... other cases\n    default:\n      return state;\n  }\n};\n\n// DataProvider component\nexport const DataProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(dataReducer, initialState);\n\n  useEffect(() => {\n    // Replace 'fetchOpportunities' with the actual API call function\n    fetchOpportunities()\n      .then(response => response.json())\n      .then(data => {\n        dispatch({ type: 'SET_OPPORTUNITIES', payload: data });\n        dispatch({ type: 'SET_LEADS', payload: data.filter(opportunity => opportunity.stage === 'Lead') });\n        dispatch({ type: 'SET_QUALIFIED', payload: data.filter(opportunity => opportunity.stage === 'Qualified') });\n        dispatch({ type: 'SET_BOOKED', payload: data.filter(opportunity => opportunity.stage === 'Booked') });\n        dispatch({ type: 'SET_TREATED', payload: data.filter(opportunity => opportunity.stage === 'Treated') });\n      })\n      .catch(error => console.error('Error fetching opportunities:', error));\n  }, []);\n\n  return (\n    <DataContext.Provider value={{ state, dispatch }}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\n// Export custom hooks for state and dispatch\nexport const useDataState = () => useContext(DataContext).state;\nexport const useDataDispatch = () => useContext(DataContext).dispatch;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE/E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,aAAa,EAAE,EAAE;EACjBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,EAAE;EACVC,OAAO,EAAE;EACT;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,gBAAGZ,aAAa,CAAC,CAAC;;AAE1C;AACA,MAAMa,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGF,KAAK;QAAEP,aAAa,EAAEQ,MAAM,CAACE;MAAQ,CAAC;IACpD,KAAK,WAAW;MACd,OAAO;QAAE,GAAGH,KAAK;QAAEN,KAAK,EAAEO,MAAM,CAACE;MAAQ,CAAC;IAC5C,KAAK,eAAe;MAClB,OAAO;QAAE,GAAGH,KAAK;QAAEL,SAAS,EAAEM,MAAM,CAACE;MAAQ,CAAC;IAChD,KAAK,YAAY;MACf,OAAO;QAAE,GAAGH,KAAK;QAAEJ,MAAM,EAAEK,MAAM,CAACE;MAAQ,CAAC;IAC7C,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGH,KAAK;QAAEH,OAAO,EAAEI,MAAM,CAACE;MAAQ,CAAC;IAC9C;IACA;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGnB,UAAU,CAACW,WAAW,EAAEP,YAAY,CAAC;EAE/DH,SAAS,CAAC,MAAM;IACd;IACAmB,kBAAkB,CAAC,CAAC,CACjBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZL,QAAQ,CAAC;QAAEL,IAAI,EAAE,mBAAmB;QAAEC,OAAO,EAAES;MAAK,CAAC,CAAC;MACtDL,QAAQ,CAAC;QAAEL,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAES,IAAI,CAACC,MAAM,CAACC,WAAW,IAAIA,WAAW,CAACC,KAAK,KAAK,MAAM;MAAE,CAAC,CAAC;MAClGR,QAAQ,CAAC;QAAEL,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAES,IAAI,CAACC,MAAM,CAACC,WAAW,IAAIA,WAAW,CAACC,KAAK,KAAK,WAAW;MAAE,CAAC,CAAC;MAC3GR,QAAQ,CAAC;QAAEL,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAES,IAAI,CAACC,MAAM,CAACC,WAAW,IAAIA,WAAW,CAACC,KAAK,KAAK,QAAQ;MAAE,CAAC,CAAC;MACrGR,QAAQ,CAAC;QAAEL,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAES,IAAI,CAACC,MAAM,CAACC,WAAW,IAAIA,WAAW,CAACC,KAAK,KAAK,SAAS;MAAE,CAAC,CAAC;IACzG,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC,CAAC;EAC1E,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE1B,OAAA,CAACO,WAAW,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,KAAK;MAAEO;IAAS,CAAE;IAAAF,QAAA,EAC9CA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAlB,EAAA,CAxBaF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAyBzB,OAAO,MAAMsB,YAAY,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMxC,UAAU,CAACW,WAAW,CAAC,CAACE,KAAK;AAAA;AAAC2B,GAAA,CAAnDD,YAAY;AACzB,OAAO,MAAME,eAAe,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM1C,UAAU,CAACW,WAAW,CAAC,CAACS,QAAQ;AAAA;AAACsB,GAAA,CAAzDD,eAAe;AAAA,IAAAH,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}